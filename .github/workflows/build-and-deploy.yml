#
# This script will build, deploy and test the app for different environments 
# Anything pushed to /main will go to production app store connect + testflight
# Anything pushed to /develop or /hotfix-staging will go to beta app store connect + testflight
# The script will also attempt to run XCUITests and report status back to slack. However this can ONLY be done on self-hosted runners due to many issues
# For the sake of redundancy the repositry has a varible set (settings -> secrets and varibales -> actions -> varibales) called USE_SELF_HOSTED 
# which can be used to quickly toggle the use of the self-hosted runner incase of an emergency.
# If set to false, script will fallback to public/free runners without running UI tests
#
name: Build, Deploy and Test
on:
  push:
    branches:
      - main
      - develop
      - hotfix-staging

env:
  #XCODE_VERSION_PUBLIC: "/Applications/Xcode_16.4.app/Contents/Developer"
  XCODE_VERSION_PUBLIC: "/Applications/Xcode_26.0.app"
  #XCODE_VERSION_SELF: "/Applications/Xcode.app/Contents/Developer" 
  XCODE_VERSION_SELF: "/Applications/Xcode-beta.app/Contents/Developer"
  #TEST_SIMULATOR_VERSION: "platform=iOS Simulator,name=iPhone 16,OS=18.5"
  TEST_SIMULATOR_VERSION: "platform=iOS Simulator,name=iPhone 17,OS=26.0"

jobs:

  # ===== PUBLIC INFRA =====
  # The free public github runners have limited tooling pre-installed, and can't automaitcally use our apple certs
  # So when we want to use something non-standard (e.g. sentry CLI) we must install it first
  # certs need to be passed in encoded in base64 strings, and then injected into the env, following githubs recommended setup
  build_deploy_public_infra:
    if: ${{ vars.USE_SELF_HOSTED == 'false' }}
    name: Deploying to Testflight from public infra
    runs-on: macos-26

    steps:
      - name: Select Xcode version
        run: sudo xcode-select -s '${{ env.XCODE_VERSION_PUBLIC }}'
        
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      # Env variables
      - name: Setup Global Env
        run: |
          echo "BUILD_CERTIFICATE_BASE64=${{ secrets.BUILD_CERTIFICATE_BASE64 }}" >> $GITHUB_ENV
          echo "P12_PASSWORD=${{ secrets.P12_PASSWORD }}" >> $GITHUB_ENV
          echo "KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}" >> $GITHUB_ENV

      - name: Setup env variables for main
        if: github.ref == 'refs/heads/main'
        run: |
          echo "BUILD_PROVISION_PROFILE_BASE64=${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}" >> $GITHUB_ENV
      
      - name: Setup env varibales for develop
        if: github.ref != 'refs/heads/main'
        run: |
          echo "BUILD_PROVISION_PROFILE_BASE64=${{ secrets.BUILD_PROVISION_PROFILE_BETA_BASE64 }}" >> $GITHUB_ENV

      # Upload Base64 copies of apple certs to github following these instructions: 
      # Note: Use app store distribution certs
      # https://docs.github.com/en/actions/guides/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # 
      # Every time we update certs / profiles or they expire, we need to update the following github actions secrets
      # BUILD_CERTIFICATE_BASE64              = exported distribution cert from inside Xcode account settings, copied with `base64 -i <file-path> | pbcopy`
      # P12_PASSWORD                          = whatever new password created for previous file
      # BUILD_PROVISION_PROFILE_BASE64        = download "Kukai Mobile Prov Dist App Store" from app store connect, copied with `base64 -i <file-path> | pbcopy`
      # BUILD_PROVISION_PROFILE_BETA_BASE64   = download "Kukai Mobile Beta Prov Dist App Store" from app store connect, copied with `base64 -i <file-path> | pbcopy`
      #
      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Auto increment build number on Dev builds only to avoid mismatch between TestFlight setups
      - name: Auto update build number
        if: github.ref != 'refs/heads/main'
        run: agvtool next-version -all

      # Build and archive for main or develop
      - name: Build and Archive
        if: github.ref == 'refs/heads/main'
        run: xcodebuild -scheme "Kukai Mobile Release" -sdk iphoneos -configuration Release -archivePath $PWD/build/Kukai-mobile.xcarchive clean archive OTHER_SWIFT_FLAGS="-Xfrontend -internalize-at-link"

      - name: Build and Archive
        if: github.ref != 'refs/heads/main'
        run: xcodebuild -scheme "Kukai Mobile Beta" -sdk iphoneos -configuration Beta -archivePath $PWD/build/Kukai-mobile.xcarchive clean archive OTHER_SWIFT_FLAGS="-Xfrontend -internalize-at-link"

      # Export .ipa for main or develop
      - name: Export .ipa
        if: github.ref == 'refs/heads/main'
        run: xcodebuild -archivePath $PWD/build/Kukai-mobile.xcarchive -exportOptionsPlist "Kukai Mobile/ExportOptions.plist" -exportPath $PWD/build -allowProvisioningUpdates -exportArchive

      - name: Export .ipa
        if: github.ref != 'refs/heads/main'
        run: xcodebuild -archivePath $PWD/build/Kukai-mobile.xcarchive -exportOptionsPlist "Kukai Mobile/ExportOptions-Beta.plist" -exportPath $PWD/build -allowProvisioningUpdates -exportArchive


      # Manually upload the dSYM's we care about to sentry, to avoid having annoying tool installed on dev machine
      - name: Install Sentry CLI
        if: ${{ success() }}
        run: brew install getsentry/tools/sentry-cli

      - name: Upload dSYM
        if: ${{ success() }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          export PATH=/usr/local/bin:$PATH
          export SENTRY_ORG=kukai
          export SENTRY_PROJECT=kukai-ios
          export CUSTOM_DSYM_PATH="$PWD/build/Kukai-mobile.xcarchive/dSYMs/Kukai Mobile.app.dSYM"
          export CUSTOM_DSYM_PATH_FRAMEWORK="$PWD/build/Kukai-mobile.xcarchive/dSYMs/Sodium.framework.dSYM"
          
          echo "CUSTOM_DSYM_PATH: $CUSTOM_DSYM_PATH"
          echo "CUSTOM_DSYM_PATH_FRAMEWORK: $CUSTOM_DSYM_PATH_FRAMEWORK"
          
          ERROR=$(sentry-cli upload-dif "$CUSTOM_DSYM_PATH" 2>&1 >/dev/null)
          ERROR=$(sentry-cli upload-dif "$CUSTOM_DSYM_PATH_FRAMEWORK" 2>&1 >/dev/null)
          
          if [ ! $? -eq 0 ]; then
          echo "warning: sentry-cli - $ERROR"
          fi

      - name: Upload to TestFlight
        if: ${{ success() }}
        env:
          APPLEID_USERNAME: ${{ secrets.APPLEID_USERNAME }}
          APPLEID_PASSWORD: ${{ secrets.APPLEID_PASSWORD }}
        run: xcrun altool --upload-app -t ios -f "build/Kukai Mobile.ipa" -u "$APPLEID_USERNAME" -p "$APPLEID_PASSWORD" --verbose

      - name: Commit new version number
        if: ${{ github.ref != 'refs/heads/main' && success() }}
        run: |
          git add .
          git commit -m "bump version"
          git push origin HEAD





  # ===== SELF HOSTED INFRA =====
  # We can skip several steps in the above process, as we have our certs installed directly on the system already
  # and we can install whatever tooling we like once, ahead of time manually, instead of every run of the runner
  build_deploy_test_self_hosted:
    if: ${{ vars.USE_SELF_HOSTED == 'true' }}
    name: Deploying to Testflight, and running tests from self-hosted runner
    runs-on: self-hosted

    steps:
      - name: Select Xcode version
        run: sudo xcode-select -s '${{ env.XCODE_VERSION_SELF }}'
        
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
  
      # Auto increment build number on Dev builds only to avoid mismatch between TestFlight setups
      - name: Auto update build number
        if: github.ref != 'refs/heads/main'
        run: agvtool next-version -all

      # Build and archive for main or develop
      - name: Build and Archive
        if: github.ref == 'refs/heads/main'
        run: xcodebuild -scheme "Kukai Mobile Release" -sdk iphoneos -configuration Release -archivePath $PWD/build/Kukai-mobile.xcarchive clean archive OTHER_SWIFT_FLAGS="-Xfrontend -internalize-at-link"

      - name: Build and Archive
        if: github.ref != 'refs/heads/main'
        run: xcodebuild -scheme "Kukai Mobile Beta" -sdk iphoneos -configuration Beta -archivePath $PWD/build/Kukai-mobile.xcarchive clean archive OTHER_SWIFT_FLAGS="-Xfrontend -internalize-at-link"

      # Export .ipa for main or develop
      - name: Export .ipa
        if: github.ref == 'refs/heads/main'
        run: xcodebuild -archivePath $PWD/build/Kukai-mobile.xcarchive -exportOptionsPlist "Kukai Mobile/ExportOptions.plist" -exportPath $PWD/build -allowProvisioningUpdates -exportArchive

      - name: Export .ipa
        if: github.ref != 'refs/heads/main'
        run: xcodebuild -archivePath $PWD/build/Kukai-mobile.xcarchive -exportOptionsPlist "Kukai Mobile/ExportOptions-Beta.plist" -exportPath $PWD/build -allowProvisioningUpdates -exportArchive

      # Manually upload the dSYM's we care about to sentry, to avoid having annoying tool installed on dev machine
      - name: Upload dSYM
        if: ${{ success() }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          export PATH=/usr/local/bin:$PATH
          export SENTRY_ORG=kukai
          export SENTRY_PROJECT=kukai-ios
          export CUSTOM_DSYM_PATH="$PWD/build/Kukai-mobile.xcarchive/dSYMs/Kukai Mobile.app.dSYM"
          
          echo "CUSTOM_DSYM_PATH: $CUSTOM_DSYM_PATH"
          
          ERROR=$(sentry-cli upload-dif "$CUSTOM_DSYM_PATH" 2>&1 >/dev/null)

          if [ ! $? -eq 0 ]; then
          echo "warning: sentry-cli - $ERROR"
          fi

      # Manually create release for sentry if running on /main
      - name: Create release on sentry
        if: ${{ github.ref == 'refs/heads/main' && success() }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          export PATH=/usr/local/bin:$PATH
          export SENTRY_ORG=kukai
          export SENTRY_PROJECT=kukai-ios

          app_bundle=$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleIdentifier" "$PWD/build/Kukai-mobile.xcarchive/Info.plist")
          app_version=$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleShortVersionString" $PWD/build/Kukai-mobile.xcarchive/Info.plist)
          app_build=$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleVersion" $PWD/build/Kukai-mobile.xcarchive/Info.plist)
          sentry_release_string="$app_bundle@$app_version+$app_build"

          ERROR=$(sentry-cli releases new --finalize "$sentry_release_string")
          
          if [ ! $? -eq 0 ]; then
          echo "warning: sentry-cli - $ERROR"
          fi
      
      - name: Upload to TestFlight
        if: ${{ success() }}
        env:
          APPLEID_USERNAME: ${{ secrets.APPLEID_USERNAME }}
          APPLEID_PASSWORD: ${{ secrets.APPLEID_PASSWORD }}
        run: xcrun altool --upload-app -t ios -f "build/Kukai Mobile.ipa" -u "$APPLEID_USERNAME" -p "$APPLEID_PASSWORD" --verbose

      - name: Commit new version number
        if: ${{ github.ref != 'refs/heads/main' && success() }}
        run: |
          git add .
          git commit -m "bump version"
          git push origin HEAD

      # Setup and run UITests while Testflight processing is taking place. Skip if /main branch
      - name: Setup Global Env
        if: github.ref != 'refs/heads/main'
        run: |
          echo "CONFIG_1=${{ secrets.UITEST_CONFIG_1 }}" >> $GITHUB_ENV
          echo "CONFIG_2=${{ secrets.UITEST_CONFIG_2 }}" >> $GITHUB_ENV
          echo "CONFIG_3=${{ secrets.UITEST_CONFIG_3 }}" >> $GITHUB_ENV

      - name: Build for testing
        if: github.ref != 'refs/heads/main'
        run: |
          xcodebuild -project "Kukai Mobile.xcodeproj" \
          -sdk iphonesimulator \
          -destination '${{ env.TEST_SIMULATOR_VERSION }}' \
          -scheme "Kukai Mobile Beta" \
          -configuration Beta \
          -derivedDataPath $PWD/build-test/ \
          -enableCodeCoverage YES \
          build-for-testing

      # Manually upload the dSYM's again incase any issues happen during XCUITests and we want to symbolicate them
      # XCUITests don't run on an archived build, they run off the xcode version loaded into memory. The dSYM for this is located in the -derivedDataPath supplied above
      - name: Upload dSYM
        if: ${{ github.ref != 'refs/heads/main' && (success() || failure()) }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          export PATH=/usr/local/bin:$PATH
          export SENTRY_ORG=kukai
          export SENTRY_PROJECT=kukai-ios
          export CUSTOM_DSYM_PATH_TEST="$PWD/build-test/Build/Products/Beta-iphonesimulator/Kukai Mobile.app.dSYM"
          
          echo "CUSTOM_DSYM_PATH_TEST: $CUSTOM_DSYM_PATH_TEST"
          
          ERROR=$(sentry-cli upload-dif "$CUSTOM_DSYM_PATH_TEST" 2>&1 >/dev/null)
          
          if [ ! $? -eq 0 ]; then
          echo "warning: sentry-cli - $ERROR"
          fi

      - name: Run tests on already built project
        if: github.ref != 'refs/heads/main'
        run: |
          xcodebuild -project "Kukai Mobile.xcodeproj" \
          -sdk iphonesimulator \
          -destination '${{ env.TEST_SIMULATOR_VERSION }}' \
          -scheme "Kukai Mobile Beta" \
          -resultBundlePath TestResults \
          -configuration Beta \
          -derivedDataPath $PWD/build-test2/ \
          -enableCodeCoverage YES \
          test \
          CONFIG_1="$CONFIG_1" \
          CONFIG_2="$CONFIG_2" \
          CONFIG_3="$CONFIG_3"

      - name: Upload xcresult file
        if: ${{ (success() || failure()) && github.ref != 'refs/heads/main' }}
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ github.run_number }}.xcresult
          path: TestResults.xcresult

      # xcresultparser lacked options to strip out lots of unnecessary and verbose information. Slack only needs a handful of pieces of information
      # If the tests fail, reading the causes from txt in slack is not workable, need the entire .xcresult file to watch the live re-plays
      # so we use the legacy mode of xcresulttool (since I can't find info on how to get it with the latest versions, due to missing coverage files)
      # using this we can fetch the number of tests, the number of failed tests, and the code coverage
      # then we convert those to numbers, normalise the coverage into a percentage, extract the version and build number from the archive
      # and then we stitch this all together into a slack block-kit message to allow us to add an emoji to make it stand out
      #
      # note: previously tried uploading the .xcresults file to slack, but the slack github-runner integration is a nightmare to use.
      # Some part of the setup wasn't done correctly, but the integration reports no errors or codes, everything just fails silently and you have to guess.
      # Instead we use a link to the github run artifact, which is fine. No need to have it in two places anyway
      - name: Report to slack
        if: ${{ (success() || failure()) && github.ref != 'refs/heads/main' }}
        run: |
            number_of_tests_string=$(xcrun xcresulttool get --legacy --path TestResults.xcresult --format json | jq '.metrics.testsCount._value // "0"')
            number_of_tests_formatted=$(echo "$number_of_tests_string" | tr -d '"')
            number_of_test_fails_string=$(xcrun xcresulttool get --legacy --path TestResults.xcresult --format json | jq '.metrics.testsFailedCount._value // "0"')
            number_of_test_fails_formatted=$(echo "$number_of_test_fails_string" | tr -d '"')

            coverage_percent_string=$(xcrun xcresulttool get --legacy --path TestResults.xcresult --format json | jq '.metrics.totalCoveragePercentage._value // "0"')
            coverage_clean_value=$(echo "$coverage_percent_string" | sed 's/[^0-9\.]//g')
            coverage_percentage=$(echo "$coverage_clean_value * 100" | bc -l)
            coverage_formatted_percentage=$(printf "%.2f%%" "$coverage_percentage")
            
            app_version=$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleShortVersionString" $PWD/build/Kukai-mobile.xcarchive/Info.plist)
            app_build=$(/usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleVersion" $PWD/build/Kukai-mobile.xcarchive/Info.plist)


            slack_message_title="Test results for $app_version ($app_build): "
            slack_message_emoji=""
            slack_message_body=""
            if [[ $number_of_test_fails_formatted == 0 ]] 
            then
                slack_message_title+="SUCCESS "
                slack_message_emoji="white_check_mark"
                slack_message_body+="\n\nNo. Tests: \t$number_of_tests_formatted\n"
            else
                slack_message_title+="FAILURE "
                slack_message_emoji="x"
                slack_message_body+="\n\nNo. Tests: \t$number_of_tests_formatted\n"
                slack_message_body+="Failures: \t\t$number_of_test_fails_formatted\n"
            fi

            slack_message_body+="Coverage: \t${coverage_formatted_percentage}\n"




            curl -0 -v -X POST ${{ secrets.SLACK_INCOMING_WEBHOOK }} \
            -H "Expect:" \
            -H 'Content-Type: application/json; charset=utf-8' \
            --data-raw '
            {
                "blocks": [
                    {
                        "type": "rich_text",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "'"${slack_message_title}"'"
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "'"${slack_message_emoji}"'"
                                    },
                                    {
                                        "type": "text",
                                        "text": "'"${slack_message_body}"'"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "Download full file from runner <${{ steps.upload_artifact.outputs.artifact-url }}|Here>"
                        }
                    }
                ]
            }'
