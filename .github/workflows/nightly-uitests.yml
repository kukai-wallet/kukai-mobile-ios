name: Nightly UI Tests
on:
  push:
    branches:
      - develop


jobs:
  deploy:
    name: Run UI Tests
    runs-on: self-hosted
    steps:
      - name: Select Xcode version
        run: sudo xcode-select -s '/Applications/Xcode.app/Contents/Developer'
        
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup Global Env
        run: |
          echo "SEED_PHRASE_1=${{ secrets.UITEST_SEED_PHRASE_1 }}" >> $GITHUB_ENV
          echo "SEED_PHRASE_PASSWORD=${{ secrets.UITEST_SEED_PHRASE_PASSWORD }}" >> $GITHUB_ENV
          echo "GMAIL_ADDRESS=${{ secrets.UITEST_GMAIL_ADDRESS }}" >> $GITHUB_ENV
          echo "GMAIL_PASSWORD=${{ secrets.UITEST_GMAIL_PASSWORD }}" >> $GITHUB_ENV
    #echo "BUILD_CERTIFICATE_BASE64=${{ secrets.BUILD_CERTIFICATE_BASE64 }}" >> $GITHUB_ENV
    #echo "P12_PASSWORD=${{ secrets.P12_PASSWORD }}" >> $GITHUB_ENV
    #echo "KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}" >> $GITHUB_ENV
    #echo "BUILD_PROVISION_PROFILE_BASE64=${{ secrets.BUILD_PROVISION_PROFILE_BETA_BASE64 }}" >> $GITHUB_ENV
      
      # Upload Base64 copies of apple certs to github following these instructions: 
      # Note: Use app store distribution certs
      # https://docs.github.com/en/actions/guides/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # 
      # Every time we update certs / profiles or they expire, we need to update the following github actions secrets
      # BUILD_CERTIFICATE_BASE64              = exported distribution cert from inside Xcode account settings, copied with `base64 -i <file-path> | pbcopy`
      # P12_PASSWORD                          = whatever new password created for previous file
      # BUILD_PROVISION_PROFILE_BASE64        = download "Kukai Mobile Prov Dist App Store" from app store connect, copied with `base64 -i <file-path> | pbcopy`
      # BUILD_PROVISION_PROFILE_BETA_BASE64   = download "Kukai Mobile Beta Prov Dist App Store" from app store connect, copied with `base64 -i <file-path> | pbcopy`
      #

    #   - name: Install the Apple certificate and provisioning profile
    #     run: |
    #       # create variables
    #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
    #       PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
    #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

    #       # import certificate and provisioning profile from secrets
    #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
    #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

    #       # create temporary keychain
    #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
    #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

    #       # import certificate to keychain
    #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
    #       security list-keychain -d user -s $KEYCHAIN_PATH

    #       # apply provisioning profile
    #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #       cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles



      - name: Build and run tests
        run: |
          xcodebuild -project "Kukai Mobile.xcodeproj" \
          -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 16,OS=18.5" \
          -scheme "Kukai Mobile Beta" \
          -resultBundlePath TestResults \
          -configuration Beta \
          -archivePath $PWD/build/Kukai-mobile.xcarchive \
          clean \
          archive \
          test \
          SEED_PHRASE_1="$SEED_PHRASE_1" \
          SEED_PHRASE_PASSWORD="$SEED_PHRASE_PASSWORD" \
          GMAIL_ADDRESS="$GMAIL_ADDRESS" \
          GMAIL_PASSWORD="$GMAIL_PASSWORD"

      - name: Upload xcresult file
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ github.run_number }}.xcresult
          path: TestResults.xcresult

      - name: Parse results
        if: ${{ success() || failure() }}
        id: xcresultparser_output
        run: |
          multiline_output=$(xcresultparser --output-format txt --failed-tests-only "TestResults.xcresult")
          {
            echo 'output<<EOF'
            echo "${multiline_output}"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Share a file to that channel
        if: ${{ success() || failure() }}
        uses: slackapi/slack-github-action@v2.0.0
        with:
            method: files.uploadV2
            token: ${{ secrets.SLACK_BOT_TOKEN }}
            payload: |
                channel: ${{ secrets.SLACK_CHANNEL_ID }}
                initial_comment: "Automated UI test run complete\n\n${{ echo "${steps.xcresultparser_output.outputs.output}" }}"
                file: "TestResults.xcresult"
                filename: "TestResults-${{ github.run_number }}.xcresult"
